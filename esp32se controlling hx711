esphome:
  name: "forty-four"
  friendly_name: forty four

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:
  

# Enable Home Assistant API
api:
  encryption:
    key: "jYK3jbA1eF2AiNKSwyUC3//TBX77sRzjTrtuNR4D0HA="

ota:
  - platform: esphome
    password: "9ae6a5c781400620fbf499605968bff1"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Eighty-One Fallback Hotspot"
    password: "bYnOUHFd79kh"

mqtt:
  broker: !secret mqtt_broker
  port: 1883
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: true
  discovery_prefix: "homeassistant"
  on_message:
    - topic: "start_the_damn_water"
      payload: "START"
      then:
        - mqtt.publish:
            topic: "pump/command"
            payload: "ON"
        - wait_until:
            condition:
              lambda: |-
                float target_volume = atof(id(target_volume_mqtt).state.c_str());
                return id(smart_scale_hx711_value).state >= target_volume;
        - mqtt.publish:
            topic: "pump/command"
            payload: "OFF"
            

globals:
  - id: initial_zero
    type: float
    restore_value: yes
    # NOTE: make sure to align this value to the one used in "calibrate_linear" below!
    initial_value: '165949.0'
    
  - id: auto_tare_enabled
    type: bool
    restore_value: yes
    initial_value: 'true'

  - id: auto_tare_difference
    type: float
    restore_value: yes
    initial_value: '0'

  - id: start_triggered
    type: bool
    restore_value: no
    initial_value: 'false'


i2c:
    sda: GPIO9
    scl: GPIO8
    scan: true  
        
one_wire:
  - platform: gpio
    pin: GPIO4

external_components:
  - source:
      type: git
      url: https://github.com/ssieb/esphome
      ref: onewire
    components: [ gpio ]
    refresh: 1min

captive_portal:
    
button:

  - platform: restart
    name: forty four restart

  ## Button used to initiate a manual tare
  - platform: template
    id: smart_scale_manual_tare_action_switch
    name: "Smart Scale Manual Tare Action"
    icon: mdi:scale-balance
    on_press:
      - lambda: |-
          id(auto_tare_difference) = id(initial_zero) - id(smart_scale_hx711_value_raw).state;
      - sensor.template.publish:
          id: smart_scale_hx711_value_raw_diagnostic
          state: !lambda 'return id(smart_scale_hx711_value_raw).state;'

  # Button to start the water pump process
  - platform: template
    name: "Start Water Dispensing"
    id: start_water_dispensing
    on_press:
      - lambda: |-
          id(start_triggered) = true;

switch:

  - platform: template
    name: "field pH Sensor Power"
    id: field_ph_sensor_power
    optimistic: true
    turn_on_action:
      - logger.log: "Turning on pH sensor (virtual power)"
    turn_off_action:
      - logger.log: "Turning off pH sensor (virtual power)"
  
  - platform: template
    name: "field EC Sensor Power"
    id: field_ec_sensor_power
    optimistic: true
    turn_on_action:
      - logger.log: "Turning on EC sensor (virtual power)"
    turn_off_action:
      - logger.log: "Turning off EC sensor (virtual power)"

   # Calibration switch to calibrate the pH sensor
  - platform: template
    name: "Calibrate pH Sensor"
    id: calibrate_ph
    turn_on_action:
      - component.update: field_ph_sensor
      - lambda: |-
          // Implement specific calibration logic if needed

   
  ## Switch to enable/disable the auto tare feature
  - platform: template
    id: smart_scale_continuous_tare_enabled
    name: "Smart Scale Continuous Tare Enabled"
    entity_category: "config"
    lambda: |-
      return id(auto_tare_enabled);
    turn_on_action:
      - lambda: |-
          id(auto_tare_enabled) = true;
    turn_off_action:
      - lambda: |-
          id(auto_tare_enabled) = false;

## Sensor Configuration ##
sensor:

  - platform: pulse_counter
    pin: GPIO41
    name: "water flow sensor"
    id: water_flow_sensor
    update_interval: 30s  # Default update interval set to 30 seconds
    filters:
      - lambda: return (x / 31);
    unit_of_measurement: "L/min"

    # Detect changes in flow rate and dynamically adjust the update interval
    on_value:
      then:
        # Adjust the update interval if the water flow changes significantly
        - if:
            condition:
              # Check if flow rate deviates significantly (adjust threshold as needed)
              - lambda: |-
                  static float last_flow = 0;
                  float current_flow = id(water_flow_sensor).state;
                  float difference = abs(current_flow - last_flow);
                  bool significant_change = difference > 0.5; // Set threshold here
                  last_flow = current_flow;
                  return significant_change;
            then:
              - lambda: |-
                  id(water_flow_sensor).set_update_interval(0.2);

        # Revert to 30s update interval when stable
        - delay: 5s
        - lambda: |-
            id(water_flow_sensor).set_update_interval(30);

  - platform: adc
    pin: GPIO1
    name: "field ph sensor"
    id: field_ph_sensor
    update_interval: 1s
    unit_of_measurement: "Ph"
    attenuation: auto 
    # https://esphome.io/components/sensor/index.html#sensor-filters
    filters:
      - throttle: 1s
      - sliding_window_moving_average: 
          window_size: 5
          send_every: 5
          send_first_at: 5
      # Measured voltage -> Actual pH (buffer solution)
      - calibrate_linear:
        
          - 2.73 -> 7
          - 3.24 -> 4
         
              
  - platform: dht
    pin: GPIO15
    temperature:
      name: "grow room live temperature"
      id: grow_room_live_temperature
    humidity:
      name: "grow room live humidity"
      id: grow_room_live_humidity
    update_interval: 60s

  - platform: template
    id: back_up_vpd
    name: "back up vpd"       
    lambda: |-
      if (id(grow_room_live_temperature).has_state() && id(grow_room_live_humidity).has_state()) {
        float temp_c = id(grow_room_live_temperature).state;
        float rh = id(grow_room_live_humidity).state;
        
        // Calculate saturation vapor pressure (in kPa)
        float saturation_vp = 0.6108 * exp((17.27 * temp_c) / (temp_c + 237.3));
        
        // Actual vapor pressure (in kPa)
        float actual_vp = saturation_vp * (rh / 100.0);
        
        // VPD calculation (in kPa)
        float vpd = saturation_vp - actual_vp;
        return vpd;
      } else {
        return NAN;
      }
   

  - platform: dallas_temp
    address:  0xf72b98d44610bd28
    id: field_dallas
    name: "field dallas"
    resolution: 12
    expire_after: 1000s
    filters:
      - filter_out: NAN 

  - platform: hdc1080
    temperature:
      name: "field temp"
      id: field_temp
    humidity:
      name: "field humidity"
      id: field_humidity 
    update_interval: 60s

  # template sensors from global variables
  - platform: template
    id: smart_scale_initial_zero
    name: "Smart Scale Initial Zero"
    lambda: |-
      return id(initial_zero);
    update_interval: 20s
    
  - platform: template
    id: smart_scale_auto_tare_difference
    name: "Smart Scale Auto Tare Zero Calibration Offset"
    lambda: |-
      return id(auto_tare_difference);
    update_interval: 1s

  - platform: template
    id: smart_scale_auto_tare_deviance
    internal: True
    entity_category: "diagnostic"
    name: "Smart Scale Calibration Deviance"
    lambda: |-
      return (int((id(smart_scale_hx711_value_raw).state - (id(initial_zero) - id(auto_tare_difference)) ) / 100)) * 100;
    update_interval: 1s
    
  # sensors imported from home assistant
  - platform: homeassistant
    id: homeassistant_initial_zero
    entity_id: input_number.smart_scale_initial_zero
    on_value:
      then:
        - lambda: |-
            id(initial_zero) = x;
  
# RAW Scale input
  - platform: hx711
    id: smart_scale_hx711_value_raw
    internal: True
    dout_pin: GPIO7
    clk_pin: GPIO12
    gain: 64
    update_interval: 0.5s
    filters:
      - quantile:
          window_size: 10
          send_every: 1
          send_first_at: 1
          quantile: .9
    on_value:
      then:
        - sensor.template.publish:
            id: smart_scale_hx711_value
            state: !lambda 'return id(smart_scale_hx711_value_raw).state;'
        - if:
            condition:
              - lambda: |-
                  auto n = id(smart_scale_hx711_value_raw_diagnostic).state;
                  auto n_str = to_string(n);
                  return str_equals_case_insensitive(n_str, "NaN");
            then:
              - sensor.template.publish:
                  id: smart_scale_hx711_value_raw_diagnostic
                  state: !lambda 'return id(smart_scale_hx711_value_raw).state;'
        - if:
            condition:
              and:
                - lambda: 'return id(auto_tare_enabled);'
                # current smart scale value is below approx. 10KG (raw value -275743) aka nobody is standing on the scale
                - lambda: 'return id(smart_scale_hx711_value).state < 10.0;'
                # only update if the current deviance is not 0
                - lambda: 'return id(smart_scale_auto_tare_deviance).state != 0.0;'
            then:
              - if:
                  condition:
                    # current raw scale value is below expected zero value
                    - lambda: 'return id(smart_scale_hx711_value_raw).state < (id(initial_zero) - id(auto_tare_difference));'
                  then:
                    # INcrease Auto-Tare offset to slowly align real zero value with expected zero value
                    - lambda: |-
                        id(auto_tare_difference) += 10;
                  else:
                    # DEcrease Auto-Tare offset to slowly align real zero value with expected zero value
                    - lambda: |-
                        id(auto_tare_difference) -= 10;

  - platform: template
    id: smart_scale_hx711_value_raw_diagnostic
    name: "Smart Scale HX711 Raw Value"
    entity_category: "diagnostic"

  # Mapped value to Liter
  - platform: template
    id: smart_scale_hx711_value
    name: "Smart Scale HX711 Value"
    internal: False
    filters:
      # apply auto_tare difference
      - lambda: 'return x + id(auto_tare_difference);'
      # apply rough calibration
      - calibrate_linear:
          # retrieve these values by evaluating the raw values with loads of known mass.
          # note that a bigger difference between measurements usually results in higher resolution,
          # so measure 0 Kg and the highest known mass you have (like f.ex. your own weight, measured by a normal scale with good accuracy)
          - 165949 -> 0
          - 744053 -> 56
      # map values below 0.1 to 0 (to decrease value changes due to random fluctuation)
      - lambda: |-
          if (x <= 0.1) {
            return 0.0;
          } else {
            return x;
          }
          
    unit_of_measurement: Liter
    accuracy_decimals: 2
    # the sensor will automatically update through the 'sensor.template.publish' call
    update_interval: never

binary_sensor:
  
  - platform: gpio
    pin: GPIO10
    name: "small reservoir water loss"
    id: small_reservoir_water_loss
    device_class: moisture
    filters:
      - invert:  # The LM393 outputs low signal when water is detected
      - delayed_on: 400ms
      - delayed_off: 400ms
    on_press:
      then:
        - script.execute: shut_down_system
        - mqtt.publish:
            topic: home/shutdown
            payload: "shutdown"
        - logger.log: "Water detected! Broadcasting shutdown to all devices via MQTT."

  - platform: gpio
    pin: GPIO11
    name: "field water loss"
    id: field_water_loss
    device_class: moisture
    filters:
      - invert:  # The LM393 outputs low signal when water is detected
      - delayed_on: 400ms
      - delayed_off: 400ms
    on_press:
      then:
        - script.execute: shut_down_system
        - mqtt.publish:
            topic: home/shutdown
            payload: "shutdown"
        - logger.log: "Water detected! Broadcasting shutdown to all devices via MQTT."


script:
  - id: shut_down_system
    then:
      - logger.log: "Water detected! Shutting down the system."

#interval:
 # - interval: 60s  # Choose an interval to take readings, e.g., every 60 seconds
   # then:
      # Power and read pH sensor
      #- switch.turn_on: field_ph_sensor_power
      #- delay: 2s  # Stabilize sensor
     # - component.update: field_ph_sensor  # Take pH sensor reading
     # - delay: 2s
     # - switch.turn_off: field_ph_sensor_power  # Turn off pH sensor
     # - delay: 1s  # Ensure pH sensor is off

      # Power and read EC sensor
      #- switch.turn_on: field_ec_sensor_power
     # - delay: 2s  # Stabilize sensor
     # - component.update: field_tds_raw  # Take EC sensor reading
      #- delay: 2s
     # - switch.turn_off: field_ec_sensor_power  # Turn off EC sensor 
  
 # - interval: 1s
    #then:
      #- if: id(dispense_new_mix)
        #to: pressed
          #condition:
            #lambda: |-
              #return id(start_triggered) && (id(smart_scale_hx711_value).state < id(the_9th_try).state);
          #then:
            #- mqtt.publish:
                #topic: "pump/command"
                #payload: "ON"
          #else:
            #- mqtt.publish:
                #topic: "pump/command"
                #payload: "OFF"
            #- lambda: |-
                #id(start_triggered) = false;
        #action: switch.turn_off
        #data: {}

#time:
 # - platform: homeassistant
   # id: homeassistant_time
   # on_time:
      # Every half hour at 5th sec:
      #- seconds: 5
      #  minutes: 0,30
       # then:
         # - output.turn_on: field_tds_raw
          #- delay: 100ms
          #- component.update: field_tds_raw_v
          #- delay: 100ms
         # - output.turn_off: field_tds_raw
         # - component.update: field_tds_tcv
         # - component.update: feild_tds
         # - component.update: feild_us
      # Every 10 sec:
     # - seconds: /10
       # then:
        #  - component.update: field_pH

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
          // 
          it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "mixing reservoir liters");
          // Print KG 
          if (10 > id(smart_scale_hx711_value).state) 
          {
             it.printf(0, 60, id(font2), TextAlign::BASELINE_LEFT,  "KG: 0%.1f", id(smart_scale_hx711_value).state);
          }
          else
          {
             it.printf(0, 60, id(font2), TextAlign::BASELINE_LEFT,  "KG: %.1f", id(smart_scale_hx711_value).state);
          }
 
font:
  - file: "gfonts://Roboto"
    id: my_font
    size: 20
  - file: "gfonts://Comic Neue"
    id: font1
    size: 8
  - file: 'gfonts://Montserrat'
    id: font2
    size: 30

number:
  - platform: template
    name: "Target Volume"
    id: the_9th_try
    optimistic: true
    min_value: 0
    max_value: 100  # Adjust based on your scale's capacity
    mode: BOX
    step: 1
    unit_of_measurement: Liters

text_sensor:
  
  - platform: mqtt_subscribe
    name: "Target Volume"
    id: target_volume_mqtt
    topic: "scale/target_volume"

  - platform: template
    name: "Water Dispensed"
    id: water_dispensed_text
    lambda: |-
      static float initial_weight = 0;
      static bool initial_set = false;

      // Set initial weight when starting
      if (!initial_set) {
        initial_weight = id(smart_scale_hx711_value).state;
        initial_set = true;
      }

      // Calculate dispensed water as the difference from the initial weight
      float current_weight = id(smart_scale_hx711_value).state;
      float water_dispensed = (initial_weight - current_weight);

      return to_string(water_dispensed) + "Liters";

