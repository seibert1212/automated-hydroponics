esphome:
  name: ninety
  friendly_name: ninety

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "3PBlLjy7+83CGvxa6WRYYoE2WQ/NqeYqk5VlktGIXWY="

ota:
  - platform: esphome
    password: "7588ece1bb6e6e4ac0d4457cc8c62ce7"

wifi:                
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 192.168.1.17
  manual_ip: 
    static_ip: 192.168.1.17
    gateway: 192.168.1.1
    subnet: 255.255.252.0
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ninety Fallback Hotspot"
    password: "WhivSCsi5bnB"

mqtt:
  broker: !secret mqtt_broker
  port: 1883
  username: !secret mqtt_username
  password: 1secret mqtt_password
  discovery: true
  discovery_prefix: "homeassistant"


i2c:
    sda: GPIO9
    scl: GPIO8
    scan: True
    frequency: 200kHz

dallasng:
  - pin: 4
    update_interval: 3s

external_components:
  - source: github://nrandell/dallasng


captive_portal:
    
sensor:
  - platform: adc
    pin: GPIO10
    name: "MQ2 sensor"
    update_interval: 10s
    filters:
      - multiply: 3.3

  - platform: adc
    pin: GPIO6
    name: "MQ5 sensor" 
    update_interval: 10sec
    filters:
      - multiply: 3.3

  - platform: bmp085
    temperature:
      name: "BMP180 Temperature"
    pressure:
      name: "BMP180 Pressure"
    update_interval: 60s

  - platform: adc
    pin: GPIO7
    name: "light sensor"
    unit_of_measurement: lux
    filters: 
      - multiply: 3.3     

  - platform: dallasng
    address: 0x4a291bd446195528
    id: "CC_dallas"
    name: cc dallas
    resolution: 12
    expire_after: 1000s

  # EC Sensor on GPIO6 with ADC readings
  
  - platform: adc
    pin: GPIO5
    name: "CC tds raw"
    id: CC_tds_raw
    update_interval: 10s
    unit_of_measurement: V
    #filters:
      #- multiply: 3.1
    accuracy_decimals: 3
    internal: False
   
# Temperature Compensated Voltage  
  - platform: template
    name: "CC TDS TCV"
    id: CC_tds_tcv
    unit_of_measurement: V
    accuracy_decimals: 3
    lambda: return ((id(CC_tds_raw).state) / (1 + (0.02 * ((id(CC_dallas).state) - 25.0))));
    update_interval: 10s
    internal: False
  
# Temperature Compensated TDS
  - platform: template
    name: "CC TDS"
    id: CC_tds
    unit_of_measurement: 'PPM'
    accuracy_decimals: 0    
    update_interval: 10s
    lambda: return (133.42*(id(CC_tds_tcv).state)*(id(CC_tds_tcv).state)*(id(CC_tds_tcv).state) - 255.86*(id(CC_tds_tcv).state)*(id(CC_tds_tcv).state) + 857.39*(id(CC_tds_tcv).state))*0.5;

# TDS to μS
  - platform: template
    name: "field μS"
    id: field_us
    unit_of_measurement: 'μS'
    accuracy_decimals: 0    
    update_interval: 10s
    lambda: return (id(CC_tds).state)*2;  

binary_sensor:
  - platform: gpio
    pin: GPIO15
    name: "fire sensor"
    device_class: smoke

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
          // 
          it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "Current Culture TDS");
          // Print KG 
          if (10 > id(CC_tds).state) 
          {
             it.printf(0, 60, id(font2), TextAlign::BASELINE_LEFT,  "PPM: 0%.1f", id(CC_tds).state);
          }
          else
          {
             it.printf(0, 60, id(font2), TextAlign::BASELINE_LEFT,  "PPM: %.1f", id(CC_tds).state);
          }
font:
  - file: "gfonts://Roboto"
    id: my_font
    size: 18
  - file: "gfonts://Comic Neue"
    id: font1
    size: 8
  - file: 'gfonts://Montserrat'
    id: font2
    size: 25

